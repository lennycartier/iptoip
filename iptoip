#!/usr/bin/perl -w

###############################################################################
#
# iptoip, v 0.3.2 ( devel )
#
# Copyright (C) 2001 Lenny Cartier (l.cartier@free.fr)
# Additional Code Mangling Copyright (C) 2013-2018 Nathan Gibbs <nathan@cmpublishers.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
###############################################################################

#use strict;
use Sys::Hostname;
use Getopt::Long;
use Sys::Syslog;
use XML::Simple;
use Socket;
require 'sys/ioctl.ph';
# Kill UTF-8
use bytes;

# Global Vars
my $i = 0;
my $host = hostname();
my ($Svcip, $error, $RET);
my $help = 0;
my $ident = '[iptoip]';
my $LOCAL_WEIGHT = 1;
my $xmlarg = '';
# Flags
$DEBUG = 0;

# Configuration Vars
my ( $BYPASS_CHECK_MODE, $IFACE, $LOGFILE, $RFC1918, $SYSLOG_OUT, $VERBOSE );
# ipvsadm args
my ( $DEST_IP, $PORT, $SCHEDULER, $PROTOCOL );
my $WEIGHT = $LOCAL_WEIGHT;
# Conf check Vars
my ( $ConfBC, $xmlOK, $xmlEr );

## Inline Options #########################################

GetOptions(
	"f|file=s" => \$xmlarg, 
	"h|help" => \$help 
);

$help && die <<END;

iptoip-0.3.2 (devel), Copyright (C) 2001 Lenny Cartier
                                (C) 2013-2018 Nathan Gibbs
iptoip comes with ABSOLUTELY NO WARRANTY;
This is free software, and you are welcome to
redistribute it under the terms of the GNU GPL.

iptoip - Update an ipvsadm table

Usage: iptoip -f -h --file --help
 -f|--file		Use specified configuration file
 -h|--help		Show this help message

END

###########################################################

# Setup XML Parser. Array-ize everything.
my $xs = XML::Simple->new(ForceArray => 1);

# Config setup.
if ( $xmlarg eq '' ) {
	$xmlarg = '/etc/iptoip.xml'
}
# Check Conf File Sanity.
$xmlOK = 0;
if ( -e $xmlarg ) {
	if ( !-z $xmlarg ) {
		if ( -r $xmlarg ) {
			$xmlOK = eval { $xmlconf = $xs->XMLin($xmlarg) }; # Is XML OK?
			if ($@) {
				$xmlEr = 'Format';
			}else{
				$xmlOK = 1;
			}
		}else{
			$xmlEr = 'Read';
		}
	}else{
		$xmlEr = 'Length';
	}
}else{
	$xmlEr = 'does not exist';
}
if ( $xmlOK == 1 ) {
	$RFC1918 = $xmlconf->{RFC1918}->[0];
	if ( !defined $RFC1918 ) { # Gracefully deprecate <nocheck>
		$BYPASS_CHECK_MODE = $xmlconf->{nocheck}->[0];
		if ( !defined $BYPASS_CHECK_MODE ) {
			$RFC1918 = 2;
		}elsif ( $BYPASS_CHECK_MODE == 0 ) {
			$RFC1918 = 1;
		}elsif ( $BYPASS_CHECK_MODE == 1 ) {
			$RFC1918 = 0;
		}else{
			$RFC1918 = 2;
		}
	}
	$SYSLOG_OUT =  $xmlconf->{syslog}->[0];
	$VERBOSE = $xmlconf->{verbose}->[0];
	$IFACE = $xmlconf->{iface}->[0];
	$ConfBC = scalar(@{$xmlconf->{conf}});
	if ( $SYSLOG_OUT != 0 ) {
		$LOGFILE = 'SYSLOG';
	}else{
		$LOGFILE = $xmlconf->{logfile}->[0];
	}
	($error, $Svcip) = &get_ip($IFACE);
	if ( $VERBOSE eq 1 ) {
		print "Configuration\n";
		print "Verbose mode = $VERBOSE\n";
		print "Log Output = $LOGFILE\n";
		print "Interface = $IFACE -> Svc IP = $Svcip\n";
		print "RFC 1918 Check Level = $RFC1918\n";
		print "Current Error code = $error\n";
	}
	&log_oops('notice', 'IPVS Start');
	if ( $error == 0 ) {
		clean_table();
		&log_oops('notice', 'IPVS Adding Virtual Entities');
		for ($i = 0; $i < $ConfBC; $i++) {
			$RET = &xml_update($i);
			if ( $RET == 0 ) {
				&log_oops('err', 'IPVS VE Add failure');
			}
		}
	}elsif ( $error == 1 ) {
		&log_oops('err', "IP on $host is a private IP. Cannot Update");
	}else{
		&log_oops('err', "Unable to get IP for $IFACE");
	}
	&log_oops('notice', 'IPVS Stop');
}else{
	&log_oops('crit', "Error File $xmlEr: $xmlarg");
}

sub get_ip {
	my $iface = shift;
	my $RET;
	my ( $OK, $IP ) = &int_get_ip($iface); # Get interface ip.
	if ( $OK != 1 ) {
		$RET = $OK - 1;
	}else{
		$RET = 0; # All is well.
		if ( $RFC1918 > 0 ) { # RFC 1918 Check.
			$RET = &ip_rfc1918 ($IP);
		}
	}
	return ( $RET, $IP );
}

sub ip_rfc1918 { # RFC 1918 Check
	my $IP = shift;
	my $RET;
	# Fix this use of special Var :-(
	$_ = $IP;
	# Fix this line to not req $_ :-(
	if(/^192\.168\..*$/ || /^10\..*$/ || /^172\.((1[6-9])|(2\d)|(3[01]))\..*$/) {
		$RET = 1;
	}else{
		$RET = 0;
	}
	return ($RET);
}

sub clean_table {
	&syslog_input('notice', 'IPVS Clearing table');
	system "/sbin/ipvsadm -C";
}

sub update_ipvs {
	my ($ip,$DEST_IP,$PORT,$SCHEDULER,$LOCAL_WEIGHT,$PF) = @_;
	my $IVA = 'IPVS VE Add';
	# update ipvsadm table with specified $ip, $DEST_IP, and $PORT
	# $SCHEDULER for load balancing
	# $LOCAL_WEIGHT the weight of the server
	my $RET = &ipvs_add_svc ($PROTOCOL,$ip,$PORT,$SCHEDULER);
	if ( $RET !=0 ) {
		&syslog_input('err', "$IVA Service failed $ip:$PORT Sched:$SCHEDULER");
	}else{
		&syslog_input('notice', "$IVA Service $ip:$PORT Sched:$SCHEDULER");
		$RET = &ipvs_add_svr ($PROTOCOL,$ip,$PORT,$DEST_IP,$LOCAL_WEIGHT,$PF);
		if ( $RET !=0 ) {
			&syslog_input('err', "$IVA Server failed $DEST_IP:$PORT Rank:$LOCAL_WEIGHT via $PF");
		}else{
			&syslog_input('notice', "$IVA Server $DEST_IP:$PORT Rank:$LOCAL_WEIGHT via $PF");
			if ( $VERBOSE eq 1 ) {
				print "$IVA Port:$PORT Proto:$PROTOCOL $ip to $DEST_IP\n";
				print "Sched:$SCHEDULER Rank:$LOCAL_WEIGHT via $PF";
				if ( $Svcip eq $ip ) {
					print " Int:$IFACE";
				}
				print "\n";
			}
		}
	}
	if ($RET == 0){
		$RET = 1;
	}else{
		$RET = 0;
	}
	return($RET);
}

sub int_get_ip {
	my ($iface) = @_;
	my ($socket, $buf, $RET, $IP, $irt );
	my @address = ();
	my $proto = getprotobyname('tcp');
	my $result = socket($socket, PF_INET, SOCK_STREAM, $proto);
	if ( !$result ) {
		$RET = -1;
	}else{
		$buf = pack('a256', $iface);
		$irt = ioctl($socket, SIOCGIFADDR(), $buf );
		if ( $irt ) {
			@address = unpack('x20 C4', $buf);
			$RET = 1;
			$IP = join('.', @address);
		}else{
			$RET = 0;
		}
	}
	return ( $RET, $IP );
}

sub ipvs_add_svc {
	my ($Proto, $ip, $Port, $Sched) = @_;
	my $cmd = "/sbin/ipvsadm -A";
	my ( $RET, $TRET, $URET ) = 1;
	$Proto = lc ($Proto);
	if ( $Proto eq 'a') {
		$TRET = &ipvs_add_svc ('t', $ip, $Port, $Sched);
		if ( $TRET == 0 ) {
			$URET = &ipvs_add_svc ('u', $ip, $Port, $Sched);
		}
		if ( $TRET == 0 && $URET == 0 ) {
			$RET = 0;
		}
	}else{
		$cmd = $cmd . " -$Proto $ip:$Port -s $Sched";
		$RET = system "$cmd";
	}
	return($RET);
}

sub ipvs_add_svr {
	my ($Proto, $ip, $Port, $Dstip, $Weight, $PF) = @_;
	my $cmd = "/sbin/ipvsadm -a";
	my ( $RET, $TRET, $URET ) = 1;
	$Proto = lc ($Proto);
	$PF = lc ($PF);
	if ( $Proto eq 'a') {
		$TRET = &ipvs_add_svr ('t', $ip, $Port, $Dstip, $Weight,$PF);
		if ( $TRET == 0 ) {
			$URET = &ipvs_add_svr ('u', $ip, $Port, $Dstip, $Weight,$PF);
		}
		if ( $TRET == 0 && $URET == 0 ) {
			$RET = 0;
		}
	}else{
		if ( $PF eq 'masq' ) {
			$PF = 'm';
		}elsif ($PF eq 'gate'){
			$PF = 'g';
		}elsif ($PF eq 'tunl'){
			$PF = 'i';
		}else{ # Error
			$RET = -1;
		}
		if ( $RET != -1 ) {
			$cmd = $cmd . " -$Proto $ip:$Port -r $Dstip:$Port -$PF -w $Weight";
			$RET = system "$cmd";
		}
	}
	return($RET);
}

sub xml_update {
	my $i = shift;
	my ( $iploc, $PF );
	my $p = 0;
	my $RET = 1;
	my $IVM = 'IPVS VE MAP';
	$PROTOCOL = $xmlconf->{conf}->[$i]->{protocol}->[0];	# get protocol type
	$DEST_IP = $xmlconf->{conf}->[$i]->{destination}->[0];	# get destination
	$SCHEDULER = $xmlconf->{conf}->[$i]->{scheduler}->[0];	# get scheduler type
	if ( $SCHEDULER=~m/^w(rr|lc)$/ ){
		$WEIGHT = $xmlconf->{conf}->[$i]->{weight}->[0];	# get the weight of servers
		if ( $WEIGHT > 1 ) {
			$LOCAL_WEIGHT = $WEIGHT;
		}
	}
	# origin tag support
	$iploc = $xmlconf->{conf}->[$i]->{origin}->[0];
	if ( !defined $iploc ) {
		$iploc = $Svcip;
	}else{
		if ( $RFC1918 > 1 && &ip_rfc1918 ($iploc) ) { # RFC 1918 Check.
				&syslog_input('err', "$IVM Svc IP to $iploc failed");
				$RET = 0;
		}else{
			&syslog_input('notice', "$IVM Svc IP to $iploc success");
		}
	}
	if ( $RET == 1 ) {
		# forward tag support
		$PF = $xmlconf->{conf}->[$i]->{forward}->[0];
		if ( !defined $PF ) {
			$PF = 'Masq';
		}
		while ( $xmlconf->{conf}->[$i]->{port}->[$p] ) {
			$PORT = $xmlconf->{conf}->[$i]->{port}->[$p];
			&syslog_input('notice', "$IVM Port:$PORT Proto:$PROTOCOL $iploc to $DEST_IP");
			$RET = &update_ipvs($iploc,$DEST_IP,$PORT,$SCHEDULER,$LOCAL_WEIGHT,$PF);
			if ( $RET == 0 ) {
				&syslog_input('err', "$IVM failed");
				last;
			}else{
				&syslog_input('notice', "$IVM success");
				$p++;
			}
		}
	}
	return($RET);
}

sub TimeStamp { # Standardized Time Stamps.
	my $Type = shift;
	my $localtime = shift;
	my @time = localtime($localtime);
	my @year_months = ('Jan','Feb','Mar','Apr','May','Jun','Jul','Aug','Sep','Oct','Nov','Dec');
	my @days_of_week = ('Sunday','Monday','Tuesday','Wednesday','Thursday','Friday','Saturday');
	my $Mn = @year_months[$time[4]];
	my $Yr = $time[5] + 1900;
	my $Dy = $time[3];
	my $Tod = sprintf ("%.2d:%.2d:%.2d", @time[2,1,0] );
	if ( $Type eq 'ST' || $Type eq '' ) {
		$localtime = sprintf ("%s %.d %d, %s", $Mn, $Dy, $Yr, $Tod );
	}elsif ($Type eq 'SL') {
		$localtime = sprintf ("%s %.d %s", $Mn, $Dy, $Tod );
	}elsif ($Type eq 'TD') {
		$localtime = sprintf ("%s %.d %d<br/>%s", $Mn, $Dy, $Yr, $Tod );
	}elsif ($Type eq 'Cookie') {
		@time = gmtime($localtime);
		$localtime = sprintf ("%s, %.2d-%s-%d %s GMT", @days_of_week[$time[6]], $Dy, $Mn, $Yr, $Tod );
	}else{
		$localtime = undef;
	}
	return $localtime;
}

# Status Reporting Subs
sub log_oops {
	my ($lvl, $msg) = (@_);
	if ( $lvl!~m/^-?\d+$/ ) { # lvl is text not # Log it.
		&syslog_input($lvl, $msg);
		if ( $lvl eq 'crit' ) { # Catch crit.
			&log_oops ( -1, $msg);
		}
	}elsif ($lvl == -1) { # Critical Error!
		die "$msg\n";
	}else{ # Log to STDERR.
		if ($DEBUG >= $lvl) {
			warn "$msg\n";
		}
	}
}

sub syslog_input {
	my ($pri,$msg) = @_;
	if ( !defined $LOGFILE ) { # Log to console.
		if ( $pri eq 'crit' ) { # Catch crit.
			&log_oops ( -1, $msg);
		}else{
			&log_oops ( 0, $msg );
		}
	}elsif ( $LOGFILE eq 'SYSLOG' ) { # Log to syslog.
		openlog $ident,'pid';
		syslog ($pri,$msg);
		closelog;
	}else{ # Log to file.
		my $TStamp = &TimeStamp('SL',time);
		if ( defined $TStamp ) {
			open ( ALOG, ">>$LOGFILE" ) or &log_oops ( -1, "Cannot open log: $!");
			print ALOG "$TStamp $msg\n";
			close ( ALOG );
		}else{ # Give up & log to console.
			&log_oops ( 0, $msg);
		}
	}
}
