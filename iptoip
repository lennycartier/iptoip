#!/usr/bin/perl -w

###############################################################################
#
# iptoip,v 0.3.1 ( devel )
#
# Copyright (C) 2001 Lenny Cartier (l.cartier@free.fr)
# Additional Code Mangling Copyright (C) 2013-2014 Nathan Gibbs <nathan@cmpublishers.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
###############################################################################

#use strict;
use Sys::Hostname;
use Getopt::Long;
use Sys::Syslog;
use XML::Simple;
use Socket;
require 'sys/ioctl.ph';
# Kill UTF-8
use bytes;

# Global Vars
my $i = 0;
my $host = hostname();
my ($ip, $error, $RET);
my $help = 0;
my $ident = "[iptoip]";
my $LOCAL_WEIGHT = "1";
my $xmlarg = "";

# Configuration Vars
my ( $BYPASS_CHECK_MODE, $SYSLOG_OUT, $VERBOSE, $IFACE );
# ipvsadm args
my ( $DEST_IP, $PORT, $SCHEDULER, $PROTOCOL );
my $WEIGHT = $LOCAL_WEIGHT;
# Conf check Vars
my ( $ConfBC, $xmlOK, $xmlEr );

## Inline Options #########################################

GetOptions(
	"f|file=s" => \$xmlarg, 
	"h|help" => \$help 
);

$help && die <<END;

iptoip-0.3.1 (devel), Copyright (C) 2001 Lenny Cartier (C) 2013-2014 Nathan Gibbs
iptoip comes with ABSOLUTELY NO WARRANTY; 
This is free software, and you are welcome to 
redistribute it under the terms of the GNU GPL.

iptoip - Update an ipvsadm table

Usage: iptoip -f -h --file --help 
 -f|--file		Use specified configuration file	
 -h|--help		Show this help message

END

###########################################################

# Setup XML Parser
# Array-ize everything
my $xs = XML::Simple->new(ForceArray => 1);

# Config setup.
if ( $xmlarg eq "" ) {
	$xmlarg = "/etc/iptoip.xml"
}
# Check Conf File Sanity.
$xmlOK = 0;
if ( -e $xmlarg ) {
	if ( !-z $xmlarg ) {
		if ( -r $xmlarg ) {
			# Is XML OK?
			$xmlOK = eval { $xmlconf = $xs->XMLin($xmlarg) };
			if ($@) {
				$xmlEr = "Format";
			}else{
				$xmlOK = 1;
			}
		}else{
			$xmlEr = "Read";
		}
	}else{
		$xmlEr = "Length";
	}
}else{
	$xmlEr = "does not exist";
}
if ( defined $xmlOK ){
	if ( $xmlOK == 1 ) {
		$BYPASS_CHECK_MODE = $xmlconf->{nocheck}->[0];
		$SYSLOG_OUT =  $xmlconf->{syslog}->[0];
		$VERBOSE = $xmlconf->{verbose}->[0];
		$IFACE = $xmlconf->{iface}->[0];
		$ConfBC = scalar(@{$xmlconf->{conf}});
		($error, $ip) = &get_ip($IFACE);
		if ( $VERBOSE eq 1 ) {
			print "Configuration\n";
			print "Verbose mode = $VERBOSE\n";
			print "SYSLOG Output = $SYSLOG_OUT\n";
			print "Interface = $IFACE\n";
			print "Disable RFC 1918 Checks = $BYPASS_CHECK_MODE\n";
			print "Current Error code = $error\n";
		}
		if ( $error eq 0 ) {
			clean_table();
			&syslog_input('notice', "IPVS Adding Virtual Entities");
			for ($i = 0; $i < $ConfBC; $i++) {
				$RET = &xml_update($i);
				if ( $RET == 0 ) {
					&syslog_input('error', "IPVS Add VE failed");
					last;
				}else{
					&syslog_input('notice', "IPVS Add VE success");
				}
			}
		}elsif ( $error eq 1 ) {
			&syslog_input('error', "IP on $host is a private IP. Cannot Update");
		}else{
			&syslog_input('error', "Unable to get IP for $IFACE");
		}
	}else{
		die "Error File $xmlEr: $xmlarg\n";
	}
}else{
	die "Error File $xmlEr: $xmlarg: $@";
}

sub syslog_input {
	my ($pri,$msg) = @_;
	# output $msg to syslog
	if ( $SYSLOG_OUT != 0 ) {
		openlog $ident,'pid';
		syslog ($pri,$msg);
		closelog;
	}
}

sub get_ip {
	my $iface = shift;
	my $RET;
	# extract internet ip
	my ( $OK, $IP ) = &int_get_ip($iface);
	if ( $OK != 1 ) {
		$RET = $OK - 1;
	}else{
		# Fix this use of special Var :-(
		$_ = $IP;
		# Assume all is well.
		$RET = 0;
		# Do we want RFC 1918 Checking?
		if ( $BYPASS_CHECK_MODE ne 1 ) {
			# RFC 1918 Check
			# Fix this line to not req $_ :-(
			if(/^192\.168\..*$/ || /^10\..*$/ || /^172\.((1[6-9])|(2\d)|(3[01]))\..*$/) {
				$RET = 1;
			}
		}
	}
	return ( $RET, $IP );
}

sub clean_table {
	syslog_input('notice',"IPVS Clearing table");
	system "/sbin/ipvsadm -C";
}

sub update_ipvs {
	my ($ip,$DEST_IP,$PORT,$SCHEDULER,$LOCAL_WEIGHT) = @_;
	# update ipvsadm table with specified $ip, $DEST_IP, and $PORT
	# $SCHEDULER for load balancing
	# $LOCAL_WEIGHT the weight of  the server
	my $RET = &ipvs_add_svc ($PROTOCOL,$ip,$PORT,$SCHEDULER);
	if ( $RET !=0 ) {
		&syslog_input('error',"IPVS VE Add Service failed for $ip:$PORT");
	}else{
		$RET = &ipvs_add_svr ($PROTOCOL,$ip,$PORT,$DEST_IP,$LOCAL_WEIGHT);
		if ( $RET !=0 ) {
			&syslog_input('error',"IPVS VE Add Server failed for $DEST_IP:$PORT");
		}else{
			# Do this stuff here where it actually makes sense.
			if ( $VERBOSE eq 1 ) { 
				comments();
			}
			&syslog_input('notice',"IPVS VE Add $ip:$PORT to $DEST_IP:$PORT");
		}
	}
	if ($RET == 0){
		$RET = 1;
	}else{
		$RET = 0;
	}
	return($RET);
}

sub int_get_ip {
	my ($iface) = @_;
	my ($socket, $buf, $RET, $IP, $irt );
	my @address = ();
	my $proto = getprotobyname('tcp');
	my $result = socket($socket, PF_INET, SOCK_STREAM, $proto);
	if ( !$result ) {
		$RET = -1;
	}else{
		$buf = pack('a256', $iface);
		$irt = ioctl($socket, SIOCGIFADDR(), $buf );
		if ( $irt ) {
			@address = unpack('x20 C4', $buf);
			$RET = 1;
			$IP = join('.', @address);
		}else{
			$RET = 0;
		}
	}
	return ( $RET, $IP );
}

sub ipvs_add_svc {
	my ($Proto, $ip, $Port, $Sched) = @_;
	my $cmd = "/sbin/ipvsadm -A";
	my ( $RET, $TRET, $URET ) = 1;
	$Proto = lc ($Proto);
	if ( $Proto eq "a") {
		$TRET = &ipvs_add_svc ("t", $ip, $Port, $Sched);
		if ( $TRET == 0 ) {
			$URET = &ipvs_add_svc ("u", $ip, $Port, $Sched);
		}
		if ( $TRET == 0 && $URET == 0 ) {
			$RET = 0;
		}
	}else{
		$cmd = $cmd . " -$Proto $ip:$Port -s $Sched";
		$RET = system "$cmd";
	}
	return($RET);
}

sub ipvs_add_svr {
	my ($Proto, $ip, $Port, $Dstip, $Weight) = @_;
	my $cmd = "/sbin/ipvsadm -a";
	my ( $RET, $TRET, $URET ) = 1;
	$Proto = lc ($Proto);
	if ( $Proto eq "a") {
		$TRET = &ipvs_add_svr ("t", $ip, $Port, $Dstip, $Weight);
		if ( $TRET == 0 ) {
			$URET = &ipvs_add_svr ("u", $ip, $Port, $Dstip, $Weight);
		}
		if ( $TRET == 0 && $URET == 0 ) {
			$RET = 0;
		}
	}else{
		$cmd = $cmd . " -$Proto $ip:$Port -r $Dstip:$Port -m -w $Weight";
		$RET = system "$cmd";
	}
	return($RET);
}

sub comments {
	print ("IPVS VE add: ");
	print ("$ip:$PORT to $DEST_IP:$PORT\n");
	print ("Int=$IFACE Proto=$PROTOCOL Scheduler=$SCHEDULER Weight=$LOCAL_WEIGHT\n");
}

sub xml_update {
	my $i = shift;
	my ( $p, $RET ) = 0;
	$PROTOCOL = $xmlconf->{conf}->[$i]->{protocol}->[0];	# get protocol type
	$DEST_IP = $xmlconf->{conf}->[$i]->{destination}->[0];	# get destination
	$PORT = $xmlconf->{conf}->[$i]->{port}->[0];		# get port value
	$SCHEDULER = $xmlconf->{conf}->[$i]->{scheduler}->[0];	# get scheduler type    
	if ( $SCHEDULER eq ( "wrr" || "wlc" ) ){
		$WEIGHT = $xmlconf->{conf}->[$i]->{weight}->[0];	# get the weight of servers
		if ( $WEIGHT > "1" ) {
			$LOCAL_WEIGHT = $WEIGHT 
		}
	}
	while ( $xmlconf->{conf}->[$i]->{port}->[$p] ) {
		$PORT = $xmlconf->{conf}->[$i]->{port}->[$p];
		$RET = &update_ipvs($ip,$DEST_IP,$PORT,$SCHEDULER,$LOCAL_WEIGHT);
		if ( $RET == 0 ) {
			last;
		}else{
			$p++;
		}
	}
	return($RET);
}
