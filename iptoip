#!/usr/bin/perl

###############################################################################
#
# iptoip,v 0.3.1 ( devel )
#
# Copyright (C) 2001 Lenny Cartier (l.cartier@free.fr)
# Additional Code Mangling Copyright (C) 2013-2014 Nathan Gibbs <nathan@cmpublishers.com>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation; either version 2, or (at your option)
# any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program; if not, write to the Free Software
# Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA 02111-1307, USA.
#
###############################################################################

#use strict;
use Sys::Hostname;
use Getopt::Long;
use Sys::Syslog  qw(:DEFAULT setlogsock);
use XML::Simple;

setlogsock 'unix';

my ( $i, $j );
my $host = hostname();
my ($ip, $error); 
my $p = 0;
my $help = 0; 
my $ident = "[iptoip]";
my $LOCAL_WEIGHT = "1";
my $xmlconf = "/etc/iptoip.xml";

my ( $BYPASS_CHECK_MODE, $SYSLOG_OUT, $VERBOSE, $IFACE );
my ( $DEST_IP, $PORT, $SCHEDULER, $WEIGHT, $PROTOCOL ); # ipvsadm args
my ( $NUMBER, $nb, $quot ); # to help find how much conf

## Inline Options #########################################

GetOptions(
	"f|file=s" => \$xmlarg, 
	"h|help" => \$help 
);

$help && die <<END;

iptoip-0.3.1 (devel), Copyright (C) 2001 Lenny Cartier (C) 2013-2014 Nathan Gibbs
iptoip comes with ABSOLUTELY NO WARRANTY; 
This is free software, and you are welcome to 
redistribute it under the terms of the GNU GPL.

iptoip - Update an ipvsadm table

Usage: iptoip -f -h --file --help 
 -f|--file		Use specified configuration file	
 -h|--help		Show this help message

END

###########################################################

### First config setup

if ( $xmlarg eq "" ) { $xmlarg = "/etc/iptoip.xml" };

# Array-ize everything
my $xs = XML::Simple->new(ForceArray => 1);
my $xmlconf = $xs->XMLin($xmlarg);

sub read_conf {
	$BYPASS_CHECK_MODE = $xmlconf->{nocheck}->[0];
	$SYSLOG_OUT =  $xmlconf->{syslog}->[0];
	$VERBOSE = $xmlconf->{verbose}->[0];
	$IFACE = $xmlconf->{iface}->[0];
}

######

sub syslog_input {
	# output $msg to syslog & STDOUT
	my $msg = shift;
	openlog $ident,'pid';
	syslog ('notice',$msg);
	closelog;
}

sub get_ip {
	# extract internet ip
	$_ = `/sbin/ifconfig $IFACE 2>&1`;
	if (s/^.*inet[ \t:]*(addr|adr)*[ \t:]*(\d{1,3}\.\d{1,3}\.\d{1,3}\.\d{1,3}).*$/$2/s) {
		# Assume all is well.
		$error = 0;
		# Do we want RFC 1918 Checking?
		if ( $BYPASS_CHECK_MODE ne 1 ) {
			# RFC 1918 Check
			if(/^192\.168\..*$/ || /^10\..*$/ || /^172\.((1[6-9])|(2\d)|(3[01]))\..*$/) {
				$error = 1;
			}
		}
		s/[\n\ \t]//g;
		$ip = $_;
	}else{
		$ip = "-- none --";
		$error = 1;
		# everything else than an ip
	}
	return $ip, $error;
}

sub clean_table {
	system "/sbin/ipvsadm -C";
}

sub update_ipvs {
	# update ipvsadm table with specified $ip, $DEST_IP, and $PORT
	if ( $PROTOCOL eq "a") {
		# $SCHEDULER for load balancing
		system "/sbin/ipvsadm -A -t $ip:$PORT -s $SCHEDULER";
		system "/sbin/ipvsadm -A -u $ip:$PORT -s $SCHEDULER";
		# $LOCAL_WEIGHT the weight of  the server
		system "/sbin/ipvsadm -a -t $ip:$PORT -r $DEST_IP:$PORT -m -w $LOCAL_WEIGHT";
		system "/sbin/ipvsadm -a -u $ip:$PORT -r $DEST_IP:$PORT -m -w $LOCAL_WEIGHT";
	}else{
		# $SCHEDULER for load balancing
		system "/sbin/ipvsadm -A -$PROTOCOL $ip:$PORT -s $SCHEDULER";
		# $LOCAL_WEIGHT the weight of  the server
		system "/sbin/ipvsadm -a -$PROTOCOL $ip:$PORT -r $DEST_IP:$PORT -m -w $LOCAL_WEIGHT";
	}
	# Do this stuff here where it actually makes sense.
	if ( $VERBOSE eq 1 ) { 
		comments();
	}
	syslog_input("ipvsadm table updated for $ip:$PORT to $DEST_IP:$PORT");
}

sub various_info {
	print ("Configuration\n");
	print ("Verbose mode = $VERBOSE\n");
	print ("Disable RFC 1918 Checks = $BYPASS_CHECK_MODE\n");
	print ("Error code = $error\n");
}

sub comments {
	print ("Ipvsadm table update: ");
	print ("On Int. $IFACE $ip:$PORT to $DEST_IP:$PORT\n");
	print ("Proto=$PROTOCOL Weight=$WEIGHT Scheduler=$SCHEDULER\n");
}

sub conf_number { # to find how much configs we have
	my $nb;
	open (XMLFILE,"<$xmlarg") || die " Can't open $xmlarg\n ";
	while (<XMLFILE>) {
		if ( /\bconf\b/ ) {
			$nb++;
		}
		# number of <conf> tags
	}
	# test if there is a non closed tag && to know if we've got 1 conf
	$quot = ( $nb / 2 ); 
	$j = ( $nb / 2 ) ;
	if ( $quot =~ /\d\.\d/ ) {
		die " ERROR, check your xml configuration file\n Remember to close <conf> tags\n";
	}elsif ( $quot eq 1 ) {
		$NUMBER = $quot;
	}
	return $NUMBER, $j;
}

sub xml_update {
	my $p = 0;
	$PROTOCOL = $xmlconf->{conf}->[$i]->{protocol}->[0];	# get protocol type
	$DEST_IP = $xmlconf->{conf}->[$i]->{destination}->[0];	# get destination
	$PORT = $xmlconf->{conf}->[$i]->{port}->[$p];		# get port value
	$SCHEDULER = $xmlconf->{conf}->[$i]->{scheduler}->[0];	# get scheduler type    
	$WEIGHT = $xmlconf->{conf}->[$i]->{weight}->[0];	# get the weight of servers
	if ( $SCHEDULER eq  "wrr" || "wlc" ){
		if ( $WEIGHT >= "1" ) {
			$LOCAL_WEIGHT = $WEIGHT 
		}
	}
	if ($PORT eq "") {
		$PORT = $xmlconf->{conf}->[$i]->{port};
		update_ipvs($ip,$DEST_IP,$PORT,$SCHEDULER,$LOCAL_WEIGHT);
	}else{
		while ( $xmlconf->{conf}->[$i]->{port}->[$p] ) {
			$PORT = $xmlconf->{conf}->[$i]->{port}->[$p];
			update_ipvs($ip,$DEST_IP,$PORT,$SCHEDULER,$LOCAL_WEIGHT);
			$p++;
		}
	}
}

conf_number();
read_conf();
get_ip();

if ( $VERBOSE eq 1 ) {
	various_info();
}
if ( $error eq 0 ) {
	clean_table();
	for ($i = 0; $i < $j; $i++) {
		xml_update();
	}
}else{
	syslog_input("IP on $host is a private IP. Cannot Update");
}

# end of file
